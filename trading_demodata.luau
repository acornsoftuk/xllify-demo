-- Demo Data Generator for Excel Workbook Examples
-- Generates realistic market data for testing trading/simulation functions
-- These were generated by xllifyAI so do not use in production!

-- =============================================================================
-- Generate Sample Price Series (with drift and volatility)
-- =============================================================================

xllify.ExcelFunction({
    name = "Demo.PriceSeries",
    description = "Generate sample price series for testing",
    category = "Demo Data"
}, function(start_price, num_days, annual_return, annual_vol, seed)
    start_price = start_price or 100
    num_days = num_days or 100
    annual_return = annual_return or 0.10
    annual_vol = annual_vol or 0.20
    seed = seed or 42

    -- Simple LCG random number generator
    local rng_state = seed
    local function lcg_random()
        rng_state = (1103515245 * rng_state + 12345) % (2^31)
        return rng_state / (2^31)
    end

    -- Box-Muller for normal distribution
    local function random_normal()
        local u1 = lcg_random()
        local u2 = lcg_random()
        return math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)
    end

    local prices = {}
    local dt = 1/252
    local current_price = start_price

    for i = 1, num_days do
        local z = random_normal()
        current_price = current_price * math.exp((annual_return - 0.5 * annual_vol * annual_vol) * dt + annual_vol * math.sqrt(dt) * z)
        table.insert(prices, {current_price})
    end

    return prices
end)

-- =============================================================================
-- Generate Volume Data (correlated with price volatility)
-- =============================================================================

xllify.ExcelFunction({
    name = "Demo.VolumeSeries",
    description = "Generate sample volume data",
    category = "Demo Data"
}, function(avg_volume, num_days, volatility, seed)
    avg_volume = avg_volume or 1000000
    num_days = num_days or 100
    volatility = volatility or 0.30
    seed = seed or 123

    local rng_state = seed
    local function lcg_random()
        rng_state = (1103515245 * rng_state + 12345) % (2^31)
        return rng_state / (2^31)
    end

    local function random_normal()
        local u1 = lcg_random()
        local u2 = lcg_random()
        return math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)
    end

    local volumes = {}
    for i = 1, num_days do
        local z = random_normal()
        local volume = avg_volume * math.exp(volatility * z)
        -- Ensure positive and round to integer
        volume = math.max(1000, math.floor(volume + 0.5))
        table.insert(volumes, {volume})
    end

    return volumes
end)

-- =============================================================================
-- Generate Execution Data (multiple fills at different prices)
-- =============================================================================

xllify.ExcelFunction({
    name = "Demo.ExecutionFills",
    description = "Generate sample execution fill data",
    category = "Demo Data"
}, function(target_price, total_quantity, num_fills, spread_pct, seed)
    target_price = target_price or 100
    total_quantity = total_quantity or 10000
    num_fills = num_fills or 10
    spread_pct = spread_pct or 0.02
    seed = seed or 456

    local rng_state = seed
    local function lcg_random()
        rng_state = (1103515245 * rng_state + 12345) % (2^31)
        return rng_state / (2^31)
    end

    -- Generate fill prices around target with some spread
    local fills = {}
    local remaining_qty = total_quantity

    for i = 1, num_fills do
        -- Random price within spread
        local price_variation = (lcg_random() - 0.5) * spread_pct * 2
        local fill_price = target_price * (1 + price_variation)

        -- Allocate quantity (last fill gets remainder)
        local fill_qty
        if i == num_fills then
            fill_qty = remaining_qty
        else
            fill_qty = math.floor(remaining_qty / (num_fills - i + 1) * (0.5 + lcg_random()))
            remaining_qty = remaining_qty - fill_qty
        end

        table.insert(fills, {fill_price, fill_qty})
    end

    return fills
end)

-- =============================================================================
-- Generate Option Chain Data
-- =============================================================================

xllify.ExcelFunction({
    name = "Demo.OptionChain",
    description = "Generate option chain with strikes around spot",
    category = "Demo Data"
}, function(spot_price, num_strikes, strike_spacing, expiry_years)
    spot_price = spot_price or 100
    num_strikes = num_strikes or 11
    strike_spacing = strike_spacing or 5
    expiry_years = expiry_years or 1

    local chain = {}
    local center_strike = math.floor(spot_price / strike_spacing) * strike_spacing
    local start_offset = -math.floor(num_strikes / 2)

    for i = 0, num_strikes - 1 do
        local strike = center_strike + (start_offset + i) * strike_spacing
        table.insert(chain, {strike})
    end

    return chain
end)

-- =============================================================================
-- Generate Yield Curve Data Points
-- =============================================================================

xllify.ExcelFunction({
    name = "Demo.YieldCurve",
    description = "Generate sample yield curve (Nelson-Siegel model)",
    category = "Demo Data"
}, function(beta0, beta1, beta2, lambda)
    beta0 = beta0 or 0.05  -- Long-term level
    beta1 = beta1 or -0.02  -- Short-term component
    beta2 = beta2 or 0.01   -- Medium-term component
    lambda = lambda or 2    -- Decay factor

    local maturities = {0.25, 0.5, 1, 2, 3, 5, 7, 10, 20, 30}
    local yields = {}

    for _, T in ipairs(maturities) do
        local factor1 = (1 - math.exp(-lambda * T)) / (lambda * T)
        local factor2 = factor1 - math.exp(-lambda * T)
        local yield = beta0 + beta1 * factor1 + beta2 * factor2

        table.insert(yields, {T, yield})
    end

    return yields
end)

-- =============================================================================
-- Generate Correlation Matrix
-- =============================================================================

xllify.ExcelFunction({
    name = "Demo.CorrelationMatrix",
    description = "Generate sample correlation matrix",
    category = "Demo Data"
}, function(size, avg_correlation, seed)
    size = size or 5
    avg_correlation = avg_correlation or 0.3
    seed = seed or 789

    local rng_state = seed
    local function lcg_random()
        rng_state = (1103515245 * rng_state + 12345) % (2^31)
        return rng_state / (2^31)
    end

    local matrix = {}
    for i = 1, size do
        matrix[i] = {}
        for j = 1, size do
            if i == j then
                matrix[i][j] = 1.0
            elseif i > j then
                matrix[i][j] = matrix[j][i]  -- Symmetric
            else
                -- Random correlation around average
                local corr = avg_correlation + (lcg_random() - 0.5) * 0.4
                corr = math.max(-0.9, math.min(0.9, corr))  -- Bound to valid range
                matrix[i][j] = corr
            end
        end
    end

    return matrix
end)

-- =============================================================================
-- Generate OHLCV (Candlestick) Data
-- =============================================================================

xllify.ExcelFunction({
    name = "Demo.OHLCV",
    description = "Generate OHLCV candlestick data",
    category = "Demo Data"
}, function(start_price, num_candles, daily_vol, avg_volume, seed)
    start_price = start_price or 100
    num_candles = num_candles or 50
    daily_vol = daily_vol or 0.02
    avg_volume = avg_volume or 1000000
    seed = seed or 999

    local rng_state = seed
    local function lcg_random()
        rng_state = (1103515245 * rng_state + 12345) % (2^31)
        return rng_state / (2^31)
    end

    local function random_normal()
        local u1 = lcg_random()
        local u2 = lcg_random()
        return math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)
    end

    local data = {}
    local current_close = start_price

    for i = 1, num_candles do
        local open = current_close

        -- Generate high/low with realistic intraday range
        local range = math.abs(random_normal()) * daily_vol * open
        local high = open + range * lcg_random()
        local low = open - range * lcg_random()

        -- Close somewhere in the range
        local close = low + (high - low) * lcg_random()
        current_close = close

        -- Volume
        local volume = math.floor(avg_volume * (0.5 + lcg_random()))

        table.insert(data, {open, high, low, close, volume})
    end

    return data
end)

-- =============================================================================
-- Generate Portfolio Holdings
-- =============================================================================

xllify.ExcelFunction({
    name = "Demo.Portfolio",
    description = "Generate sample portfolio holdings",
    category = "Demo Data"
}, function(num_positions, total_value, seed)
    num_positions = num_positions or 10
    total_value = total_value or 1000000
    seed = seed or 321

    local rng_state = seed
    local function lcg_random()
        rng_state = (1103515245 * rng_state + 12345) % (2^31)
        return rng_state / (2^31)
    end

    local tickers = {"AAPL", "MSFT", "GOOGL", "AMZN", "META", "TSLA", "NVDA", "JPM", "BAC", "XOM",
                     "WMT", "JNJ", "PG", "V", "MA", "UNH", "HD", "DIS", "NFLX", "ADBE"}

    local portfolio = {}
    local remaining_value = total_value

    for i = 1, num_positions do
        local ticker = tickers[i] or ("TICK" .. i)

        -- Allocate random weight
        local weight
        if i == num_positions then
            weight = 1.0
        else
            weight = 0.3 + lcg_random() * 0.4  -- Between 30-70% of remaining
        end

        local position_value = remaining_value * weight
        remaining_value = remaining_value * (1 - weight)

        -- Generate price and quantity
        local price = 50 + lcg_random() * 200
        local quantity = math.floor(position_value / price)

        table.insert(portfolio, {ticker, quantity, price, quantity * price})
    end

    return portfolio
end)
